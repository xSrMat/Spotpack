/*     */ package LehanClient;
/*     */ 
/*     */ import net.minecraft.client.Minecraft;
/*     */ import net.minecraft.client.gui.FontRenderer;
/*     */ import net.minecraft.client.gui.Gui;
/*     */ import net.minecraft.client.renderer.GlStateManager;
/*     */ import net.minecraft.client.renderer.OpenGlHelper;
/*     */ import net.minecraft.util.ResourceLocation;
/*     */ import org.lwjgl.opengl.GL11;
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ public class Roundedutil
/*     */ {
/*  44 */   static final Minecraft mc = Minecraft.getMinecraft();
/*  45 */   static final FontRenderer fr = mc.fontRendererObj;
/*     */   
/*     */   public static void enableGL2D() {
/*  48 */     GL11.glDisable(2929);
/*  49 */     GL11.glEnable(3042);
/*  50 */     GL11.glDisable(3553);
/*  51 */     GL11.glBlendFunc(770, 771);
/*  52 */     GL11.glDepthMask(true);
/*  53 */     GL11.glEnable(2848);
/*  54 */     GL11.glHint(3154, 4354);
/*  55 */     GL11.glHint(3155, 4354);
/*     */   }
/*     */   
/*     */   public static void disableGL2D() {
/*  59 */     GL11.glEnable(3553);
/*  60 */     GL11.glDisable(3042);
/*  61 */     GL11.glEnable(2929);
/*  62 */     GL11.glDisable(2848);
/*  63 */     GL11.glHint(3154, 4352);
/*  64 */     GL11.glHint(3155, 4352);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void drawSmoothRoundedRect(float x, float y, float x1, float y1, float radius, int color) {
/*  82 */     GL11.glPushAttrib(0);
/*  83 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/*  84 */     x = (float)(x * 2.0D);
/*  85 */     y = (float)(y * 2.0D);
/*  86 */     x1 = (float)(x1 * 2.0D);
/*  87 */     y1 = (float)(y1 * 2.0D);
/*  88 */     GL11.glEnable(3042);
/*  89 */     GL11.glDisable(3553);
/*  90 */     GL11.glEnable(2848);
/*  91 */     setColor(color);
/*  92 */     GL11.glEnable(2848);
/*  93 */     GL11.glBegin(9);
/*     */     int i;
/*  95 */     for (i = 0; i <= 90; i += 3)
/*  96 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/*  97 */     for (i = 90; i <= 180; i += 3)
/*  98 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/*  99 */     for (i = 0; i <= 90; i += 3)
/* 100 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 101 */     for (i = 90; i <= 180; i += 3)
/* 102 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 103 */     GL11.glEnd();
/* 104 */     GL11.glBegin(2);
/* 105 */     for (i = 0; i <= 90; i += 3)
/* 106 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 107 */     for (i = 90; i <= 180; i += 3)
/* 108 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 109 */     for (i = 0; i <= 90; i += 3)
/* 110 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 111 */     for (i = 90; i <= 180; i += 3)
/* 112 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 113 */     GL11.glEnd();
/* 114 */     GL11.glEnable(3553);
/* 115 */     GL11.glDisable(3042);
/* 116 */     GL11.glDisable(2848);
/* 117 */     GL11.glDisable(2848);
/* 118 */     GL11.glEnable(3553);
/* 119 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 120 */     GL11.glPopAttrib();
/* 121 */     GL11.glLineWidth(1.0F);
/* 122 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */   public static void drawRoundedRect(float x, float y, float x1, float y1, float radius, int color) {
/* 125 */     GL11.glPushAttrib(0);
/* 126 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/* 127 */     x = (float)(x * 2.0D);
/* 128 */     y = (float)(y * 2.0D);
/* 129 */     x1 = (float)(x1 * 2.0D);
/* 130 */     y1 = (float)(y1 * 2.0D);
/* 131 */     GL11.glEnable(3042);
/* 132 */     GL11.glDisable(3553);
/* 133 */     GL11.glEnable(2848);
/* 134 */     setColor(color);
/* 135 */     GL11.glEnable(2848);
/* 136 */     GL11.glBegin(9);
/*     */     int i;
/* 138 */     for (i = 0; i <= 90; i += 3)
/* 139 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 140 */     for (i = 90; i <= 180; i += 3)
/* 141 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 142 */     for (i = 0; i <= 90; i += 3)
/* 143 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 144 */     for (i = 90; i <= 180; i += 3)
/* 145 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 146 */     GL11.glEnd();
/* 147 */     GL11.glEnable(3553);
/* 148 */     GL11.glDisable(3042);
/* 149 */     GL11.glDisable(2848);
/* 150 */     GL11.glDisable(3042);
/* 151 */     GL11.glDisable(2848);
/* 152 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 153 */     GL11.glEnable(3042);
/* 154 */     GL11.glPopAttrib();
/* 155 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void drawRoundedOutline(float x, float y, float x1, float y1, float radius, float lineWidth, int color) {
/* 168 */     GL11.glPushAttrib(0);
/* 169 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/* 170 */     x = (float)(x * 2.0D);
/* 171 */     y = (float)(y * 2.0D);
/* 172 */     x1 = (float)(x1 * 2.0D);
/* 173 */     y1 = (float)(y1 * 2.0D);
/* 174 */     GL11.glEnable(3042);
/* 175 */     GL11.glDisable(3553);
/* 176 */     setColor(color);
/* 177 */     GL11.glEnable(2848);
/* 178 */     GL11.glLineWidth(lineWidth);
/* 179 */     GL11.glBegin(2);
/*     */     int i;
/* 181 */     for (i = 0; i <= 90; i += 3)
/* 182 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 183 */     for (i = 90; i <= 180; i += 3)
/* 184 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 185 */     for (i = 0; i <= 90; i += 3)
/* 186 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 187 */     for (i = 90; i <= 180; i += 3)
/* 188 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 189 */     GL11.glEnd();
/* 190 */     GL11.glEnable(3553);
/* 191 */     GL11.glDisable(3042);
/* 192 */     GL11.glDisable(2848);
/* 193 */     GL11.glDisable(3042);
/* 194 */     GL11.glEnable(3553);
/* 195 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 196 */     GL11.glPopAttrib();
/* 197 */     GL11.glLineWidth(1.0F);
/* 198 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void drawSelectRoundedRect(float x, float y, float x1, float y1, float radius1, float radius2, float radius3, float radius4, int color) {
/* 220 */     GL11.glPushAttrib(0);
/* 221 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/* 222 */     x = (float)(x * 2.0D);
/* 223 */     y = (float)(y * 2.0D);
/* 224 */     x1 = (float)(x1 * 2.0D);
/* 225 */     y1 = (float)(y1 * 2.0D);
/* 226 */     GL11.glEnable(3042);
/* 227 */     GL11.glDisable(3553);
/* 228 */     setColor(color);
/* 229 */     GL11.glEnable(2848);
/* 230 */     GL11.glBegin(9);
/*     */     int i;
/* 232 */     for (i = 0; i <= 90; i += 3)
/* 233 */       GL11.glVertex2d((x + radius1) + Math.sin(i * Math.PI / 180.0D) * radius1 * -1.0D, (y + radius1) + Math.cos(i * Math.PI / 180.0D) * radius1 * -1.0D); 
/* 234 */     for (i = 90; i <= 180; i += 3)
/* 235 */       GL11.glVertex2d((x + radius2) + Math.sin(i * Math.PI / 180.0D) * radius2 * -1.0D, (y1 - radius2) + Math.cos(i * Math.PI / 180.0D) * radius2 * -1.0D); 
/* 236 */     for (i = 0; i <= 90; i += 3)
/* 237 */       GL11.glVertex2d((x1 - radius3) + Math.sin(i * Math.PI / 180.0D) * radius3, (y1 - radius3) + Math.cos(i * Math.PI / 180.0D) * radius3); 
/* 238 */     for (i = 90; i <= 180; i += 3)
/* 239 */       GL11.glVertex2d((x1 - radius4) + Math.sin(i * Math.PI / 180.0D) * radius4, (y + radius4) + Math.cos(i * Math.PI / 180.0D) * radius4); 
/* 240 */     GL11.glEnd();
/* 241 */     GL11.glEnable(3553);
/* 242 */     GL11.glDisable(3042);
/* 243 */     GL11.glDisable(2848);
/* 244 */     GL11.glDisable(3042);
/* 245 */     GL11.glEnable(3553);
/* 246 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 247 */     GL11.glPopAttrib();
/* 248 */     GL11.glLineWidth(1.0F);
/* 249 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void drawSelectRoundedOutline(float x, float y, float x1, float y1, float radius1, float radius2, float radius3, float radius4, float lineWidth, int color) {
/* 266 */     GL11.glPushAttrib(0);
/* 267 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/* 268 */     x = (float)(x * 2.0D);
/* 269 */     y = (float)(y * 2.0D);
/* 270 */     x1 = (float)(x1 * 2.0D);
/* 271 */     y1 = (float)(y1 * 2.0D);
/* 272 */     GL11.glEnable(3042);
/* 273 */     GL11.glDisable(3553);
/* 274 */     setColor(color);
/* 275 */     GL11.glEnable(2848);
/* 276 */     GL11.glLineWidth(lineWidth);
/* 277 */     GL11.glBegin(2);
/*     */     int i;
/* 279 */     for (i = 0; i <= 90; i += 3)
/* 280 */       GL11.glVertex2d((x + radius1) + Math.sin(i * Math.PI / 180.0D) * radius1 * -1.0D, (y + radius1) + Math.cos(i * Math.PI / 180.0D) * radius1 * -1.0D); 
/* 281 */     for (i = 90; i <= 180; i += 3)
/* 282 */       GL11.glVertex2d((x + radius2) + Math.sin(i * Math.PI / 180.0D) * radius2 * -1.0D, (y1 - radius2) + Math.cos(i * Math.PI / 180.0D) * radius2 * -1.0D); 
/* 283 */     for (i = 0; i <= 90; i += 3)
/* 284 */       GL11.glVertex2d((x1 - radius3) + Math.sin(i * Math.PI / 180.0D) * radius3, (y1 - radius3) + Math.cos(i * Math.PI / 180.0D) * radius3); 
/* 285 */     for (i = 90; i <= 180; i += 3)
/* 286 */       GL11.glVertex2d((x1 - radius4) + Math.sin(i * Math.PI / 180.0D) * radius4, (y + radius4) + Math.cos(i * Math.PI / 180.0D) * radius4); 
/* 287 */     GL11.glEnd();
/* 288 */     GL11.glEnable(3553);
/* 289 */     GL11.glDisable(3042);
/* 290 */     GL11.glDisable(2848);
/* 291 */     GL11.glDisable(3042);
/* 292 */     GL11.glEnable(3553);
/* 293 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 294 */     GL11.glPopAttrib();
/* 295 */     GL11.glLineWidth(1.0F);
/* 296 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */   public static void setColor(int color) {
/* 299 */     float a = (color >> 24 & 0xFF) / 255.0F;
/* 300 */     float r = (color >> 16 & 0xFF) / 255.0F;
/* 301 */     float g = (color >> 8 & 0xFF) / 255.0F;
/* 302 */     float b = (color & 0xFF) / 255.0F;
/* 303 */     GL11.glColor4f(r, g, b, a);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void drawRoundedGradientRectCorner(float x, float y, float x1, float y1, float radius, int color, int color2, int color3, int color4) {
/* 324 */     setColor(-1);
/* 325 */     GL11.glEnable(3042);
/* 326 */     GL11.glDisable(3553);
/* 327 */     GL11.glBlendFunc(770, 771);
/* 328 */     GL11.glEnable(2848);
/* 329 */     GL11.glShadeModel(7425);
/*     */     
/* 331 */     GL11.glPushAttrib(0);
/* 332 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/* 333 */     x = (float)(x * 2.0D);
/* 334 */     y = (float)(y * 2.0D);
/* 335 */     x1 = (float)(x1 * 2.0D);
/* 336 */     y1 = (float)(y1 * 2.0D);
/* 337 */     GL11.glEnable(3042);
/* 338 */     GL11.glDisable(3553);
/* 339 */     setColor(color);
/* 340 */     GL11.glEnable(2848);
/* 341 */     GL11.glShadeModel(7425);
/* 342 */     GL11.glBegin(9);
/*     */     int i;
/* 344 */     for (i = 0; i <= 90; i += 3)
/* 345 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 346 */     setColor(color2);
/* 347 */     for (i = 90; i <= 180; i += 3)
/* 348 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 349 */     setColor(color3);
/* 350 */     for (i = 0; i <= 90; i += 3)
/* 351 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 352 */     setColor(color4);
/* 353 */     for (i = 90; i <= 180; i += 3)
/* 354 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 355 */     GL11.glEnd();
/* 356 */     GL11.glEnable(3553);
/* 357 */     GL11.glDisable(3042);
/* 358 */     GL11.glDisable(2848);
/* 359 */     GL11.glDisable(3042);
/* 360 */     GL11.glEnable(3553);
/* 361 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 362 */     GL11.glPopAttrib();
/*     */ 
/*     */     
/* 365 */     GL11.glEnable(3553);
/* 366 */     GL11.glDisable(3042);
/* 367 */     GL11.glDisable(2848);
/* 368 */     GL11.glShadeModel(7424);
/* 369 */     setColor(-1);
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void drawRoundedGradientOutlineCorner(float x, float y, float x1, float y1, float width, float radius, int color, int color2, int color3, int color4) {
/* 386 */     setColor(-1);
/* 387 */     GL11.glEnable(3042);
/* 388 */     GL11.glDisable(3553);
/* 389 */     GL11.glBlendFunc(770, 771);
/* 390 */     GL11.glEnable(2848);
/* 391 */     GL11.glShadeModel(7425);
/*     */     
/* 393 */     GL11.glPushAttrib(0);
/* 394 */     GL11.glScaled(0.5D, 0.5D, 0.5D);
/* 395 */     x = (float)(x * 2.0D);
/* 396 */     y = (float)(y * 2.0D);
/* 397 */     x1 = (float)(x1 * 2.0D);
/* 398 */     y1 = (float)(y1 * 2.0D);
/* 399 */     GL11.glEnable(3042);
/* 400 */     GL11.glDisable(3553);
/* 401 */     setColor(color);
/* 402 */     GL11.glEnable(2848);
/* 403 */     GL11.glShadeModel(7425);
/* 404 */     GL11.glLineWidth(width);
/* 405 */     GL11.glBegin(2);
/*     */     int i;
/* 407 */     for (i = 0; i <= 90; i += 3)
/* 408 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 409 */     setColor(color2);
/* 410 */     for (i = 90; i <= 180; i += 3)
/* 411 */       GL11.glVertex2d((x + radius) + Math.sin(i * Math.PI / 180.0D) * radius * -1.0D, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius * -1.0D); 
/* 412 */     setColor(color3);
/* 413 */     for (i = 0; i <= 90; i += 3)
/* 414 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y1 - radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 415 */     setColor(color4);
/* 416 */     for (i = 90; i <= 180; i += 3)
/* 417 */       GL11.glVertex2d((x1 - radius) + Math.sin(i * Math.PI / 180.0D) * radius, (y + radius) + Math.cos(i * Math.PI / 180.0D) * radius); 
/* 418 */     GL11.glEnd();
/* 419 */     GL11.glLineWidth(1.0F);
/* 420 */     GL11.glEnable(3553);
/* 421 */     GL11.glDisable(3042);
/* 422 */     GL11.glDisable(2848);
/* 423 */     GL11.glDisable(3042);
/* 424 */     GL11.glEnable(3553);
/* 425 */     GL11.glScaled(2.0D, 2.0D, 2.0D);
/* 426 */     GL11.glPopAttrib();
/*     */ 
/*     */     
/* 429 */     GL11.glEnable(3553);
/* 430 */     GL11.glDisable(3042);
/* 431 */     GL11.glDisable(2848);
/* 432 */     GL11.glShadeModel(7424);
/* 433 */     setColor(-1);
/*     */   }
/*     */   
/*     */   public static void drawImage(ResourceLocation image, float x, float y, float width, float height, float alpha) {
/* 437 */     GL11.glPushMatrix();
/* 438 */     GL11.glDisable(2929);
/* 439 */     GL11.glEnable(3042);
/* 440 */     GL11.glDepthMask(false);
/* 441 */     OpenGlHelper.glBlendFunc(770, 771, 1, 0);
/* 442 */     GL11.glColor4f(1.0F, 1.0F, 1.0F, alpha);
/* 443 */     mc.getTextureManager().bindTexture(image);
/* 444 */     Gui.drawModalRectWithCustomSizedTexture((int)x, (int)y, 0.0F, 0.0F, (int)width, (int)height, width, height);
/* 445 */     GL11.glDepthMask(true);
/* 446 */     GL11.glDisable(3042);
/* 447 */     GL11.glEnable(2929);
/* 448 */     GL11.glPopMatrix();
/*     */     
/* 450 */     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */   
/*     */   public static void drawImage(ResourceLocation image, int x, int y, float width, float height, float alpha) {
/* 454 */     GL11.glPushMatrix();
/* 455 */     GL11.glDisable(2929);
/* 456 */     GL11.glEnable(3042);
/* 457 */     GL11.glDepthMask(false);
/* 458 */     OpenGlHelper.glBlendFunc(770, 771, 1, 0);
/* 459 */     GL11.glColor4f(1.0F, 1.0F, 1.0F, alpha);
/* 460 */     mc.getTextureManager().bindTexture(image);
/* 461 */     Gui.drawModalRectWithCustomSizedTexture(x, y, 0.0F, 0.0F, (int)width, (int)height, 
/* 462 */         width, height);
/* 463 */     GL11.glDepthMask(true);
/* 464 */     GL11.glDisable(3042);
/* 465 */     GL11.glEnable(2929);
/* 466 */     GL11.glPopMatrix();
/*     */     
/* 468 */     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
/*     */   }
/*     */   
/*     */   public static void drawImage(ResourceLocation image, float x, float y, float width, float height) {
/* 472 */     GL11.glDisable(2929);
/* 473 */     GL11.glEnable(3042);
/* 474 */     GL11.glDepthMask(false);
/* 475 */     OpenGlHelper.glBlendFunc(770, 771, 1, 0);
/* 476 */     GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
/* 477 */     mc.getTextureManager().bindTexture(image);
/* 478 */     Gui.drawModalRectWithCustomSizedTexture((int)x, (int)y, 0.0F, 0.0F, (int)width, (int)height, width, height);
/* 479 */     GL11.glDepthMask(true);
/* 480 */     GL11.glDisable(3042);
/* 481 */     GL11.glEnable(2929);
/*     */   }
/*     */ }


/* Location:              C:\Users\Mathew\Documents\LehanClient.jar!\LehanClient\Roundedutil.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */