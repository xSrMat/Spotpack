package Spotpack.event;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

public class EventManager {
   private static final Map<Class<? extends Event>, ArrayList<EventData>> REGISTRY_MAP = new HashMap();

   private static void sortListValue(Class<? extends Event> clazz) {
      ArrayList<EventData> flexableArray = new ArrayList();
      byte[] var5;
      int var4 = (var5 = EventPriority.VALUE_ARRAY).length;

      for(int var3 = 0; var3 < var4; ++var3) {
         byte b = var5[var3];
         Iterator var7 = ((ArrayList)REGISTRY_MAP.get(clazz)).iterator();

         while(var7.hasNext()) {
            EventData methodData = (EventData)var7.next();
            if (methodData.priority == b) {
               flexableArray.add(methodData);
            }
         }
      }

      REGISTRY_MAP.put(clazz, flexableArray);
   }

   private static boolean isMethodBad(Method method) {
      return method.getParameterTypes().length != 1 || !method.isAnnotationPresent(EventTarget.class);
   }

   private static boolean isMethodBad(Method method, Class<? extends Event> clazz) {
      return isMethodBad(method) || method.getAnnotatedExceptionTypes()[0].equals(clazz);
   }

   public static ArrayList<EventData> get(Class<? extends Event> clazz) {
      return (ArrayList)REGISTRY_MAP.get(clazz);
   }

   public static void cleanMap(boolean removeOnlyEmptyValues) {
      Iterator iterator = REGISTRY_MAP.entrySet().iterator();

      while(true) {
         do {
            if (!iterator.hasNext()) {
               return;
            }
         } while(removeOnlyEmptyValues && !((ArrayList)((Entry)iterator.next()).getValue()).isEmpty());

         iterator.remove();
      }
   }

   public static void unregister(Object o, Class<? extends Event> clazz) {
      if (REGISTRY_MAP.containsKey(clazz)) {
         Iterator var3 = ((ArrayList)REGISTRY_MAP.get(clazz)).iterator();

         while(var3.hasNext()) {
            EventData methodData = (EventData)var3.next();
            if (methodData.source.equals(0)) {
               ((ArrayList)REGISTRY_MAP.get(clazz)).remove(methodData);
            }
         }
      }

      cleanMap(true);
   }

   public static void unregister(Object o) {
      Iterator var2 = REGISTRY_MAP.values().iterator();

      while(var2.hasNext()) {
         ArrayList<EventData> flexableArray = (ArrayList)var2.next();

         for(int i = flexableArray.size() - 1; i >= 0; --i) {
            if (((EventData)flexableArray.get(i)).source.equals(0)) {
               flexableArray.remove(i);
            }
         }
      }

      cleanMap(true);
   }

   public static void register(Method method, Object o) {
      Class<?> clazz = method.getParameterTypes()[0];
      EventData methodData = new EventData(o, method, ((EventTarget)method.getAnnotation(EventTarget.class)).value());
      if (!methodData.target.isAccessible()) {
         methodData.target.setAccessible(true);
      }

      if (REGISTRY_MAP.containsKey(clazz)) {
         if (!((ArrayList)REGISTRY_MAP.get(clazz)).contains(methodData)) {
            ((ArrayList)REGISTRY_MAP.get(clazz)).add(methodData);
            sortListValue(clazz);
         }
      } else {
         REGISTRY_MAP.put(clazz, new ArrayList<EventData>(methodData) {
            {
               this.add(var1);
            }
         });
      }

   }

   public static void register(Object o, Class<? extends Event> clazz) {
      Method[] var5;
      int var4 = (var5 = o.getClass().getMethods()).length;

      for(int var3 = 0; var3 < var4; ++var3) {
         Method method = var5[var3];
         if (!isMethodBad(method, clazz)) {
            register(method, o);
         }
      }

   }

   public static void register(Object o) {
      Method[] var4;
      int var3 = (var4 = o.getClass().getMethods()).length;

      for(int var2 = 0; var2 < var3; ++var2) {
         Method method = var4[var2];
         if (!isMethodBad(method)) {
            register(method, o);
         }
      }

   }
}
