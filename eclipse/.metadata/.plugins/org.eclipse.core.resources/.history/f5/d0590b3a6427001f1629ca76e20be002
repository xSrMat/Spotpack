/*     */ package LehanClient.utils.fontRenderer;
/*     */ 
/*     */ import LehanClient.gui.MinecraftInterface;
/*     */ import java.awt.Color;
/*     */ import java.util.Locale;
/*     */ import net.minecraft.client.gui.Gui;
/*     */ import net.minecraft.client.renderer.GlStateManager;
/*     */ import net.minecraft.client.renderer.Tessellator;
/*     */ import net.minecraft.client.renderer.WorldRenderer;
/*     */ import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
/*     */ import net.minecraft.util.ResourceLocation;
/*     */ 
/*     */ public class FixedFontRenderer
/*     */   implements MinecraftInterface {
/*  15 */   private static final int[] colorCodes = new int[] { 
/*  16 */       0, 170, 43520, 43690, 11141120, 11141290, 16755200, 11184810, 5592405, 5592575, 
/*  17 */       5635925, 5636095, 16733525, 16733695, 16777045, 16777215, 42, 10752, 10794, 2752512, 
/*  18 */       2752554, 2763264, 2763306, 1381653, 1381695, 1392405, 1392447, 4134165, 4134207, 4144917, 
/*  19 */       4144959 };
/*     */   
/*  21 */   private static ResourceLocation font = new ResourceLocation("lehan/ascii.png");
/*     */   
/*     */   public static void drawStringWithShadow(String text, float x, float y, float size, int color) {
/*  24 */     drawString(text, x + size / 8.0F, y + size / 8.0F, size, (new Color(color, true)).darker().darker().darker().darker().getRGB());
/*  25 */     drawString(text, x, y, size, color);
/*     */   }
/*     */   
/*     */   public static void drawString(String text, float x, float y, float size, int color) {
/*  29 */     float red = (color >> 16 & 0xFF) / 255.0F;
/*  30 */     float green = (color >> 8 & 0xFF) / 255.0F;
/*  31 */     float blue = (color & 0xFF) / 255.0F;
/*  32 */     float alpha = (color >> 24 & 0xFF) / 255.0F;
/*  33 */     GlStateManager.pushMatrix();
/*  34 */     GlStateManager.scale(size / 8.0F, size / 8.0F, size / 8.0F);
/*  35 */     GlStateManager.color(red, green, blue, alpha);
/*  36 */     if (y % 0.5F == 0.0F)
/*  37 */       y += mc.gameSettings.ofFastRender ? 0.0F : 0.1F; 
/*  38 */     x /= size / 8.0F;
/*  39 */     y /= size / 8.0F;
/*  40 */     float offset = 0.0F;
/*  41 */     for (int i = 0; i < text.length(); i++) {
/*  42 */       int characterIndex = text.charAt(i);
/*  43 */       if (characterIndex == 167 && i + 1 < text.length()) {
/*  44 */         int l = "0123456789abcdefklmnor".indexOf(text.toLowerCase(Locale.ENGLISH).charAt(i + 1));
/*  45 */         if (l < 16) {
/*  46 */           if (l < 0 || l > 15)
/*  47 */             l = 15; 
/*  48 */           int i2 = colorCodes[l];
/*  49 */           red = ((i2 >> 16) / 255);
/*  50 */           green = ((i2 >> 8 & 0xFF) / 255);
/*  51 */           blue = ((i2 & 0xFF) / 255);
/*  52 */           GlStateManager.color(red, green, blue, alpha);
/*     */         } 
/*  54 */         i++;
/*     */       } else {
/*  56 */         mc.getTextureManager().bindTexture(font);
/*  57 */         GlStateManager.enableTexture2D();
/*  58 */         GlStateManager.enableAlpha();
/*  59 */         GlStateManager.enableBlend();
/*  60 */         GlStateManager.alphaFunc(516, 0.0F);
/*  61 */         GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/*  62 */         Gui.drawModalRectWithCustomSizedTexture(x + offset, y, (characterIndex % 16 * 8), (characterIndex / 16 * 8), 7.9F, 7.9F, 128.0F, 128.0F);
/*  63 */         offset += mc.fontRendererObj.getCharWidthNoUnicode((char)characterIndex);
/*     */       } 
/*     */     } 
/*  66 */     GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
/*  67 */     GlStateManager.popMatrix();
/*     */   }
/*     */   
/*     */   public static void drawImage(ResourceLocation image, double x, double y, double imageX, double imageY, double renderWidth, double renderHeight, double width, double height, double imageWidth, double imageHeight) {
/*  71 */     GlStateManager.enableAlpha();
/*  72 */     GlStateManager.enableBlend();
/*  73 */     GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
/*  74 */     GlStateManager.alphaFunc(516, 0.0F);
/*  75 */     mc.getTextureManager().bindTexture(image);
/*  76 */     double f = 1.0D / width;
/*  77 */     double f2 = 1.0D / height;
/*  78 */     Tessellator tessellator = Tessellator.getInstance();
/*  79 */     WorldRenderer worldrenderer = tessellator.getWorldRenderer();
/*  80 */     worldrenderer.begin(7, DefaultVertexFormats.POSITION_TEX);
/*  81 */     worldrenderer.pos(x, y + imageHeight, 0.0D).tex(imageX * f, (imageY + renderHeight) * f2).endVertex();
/*  82 */     worldrenderer.pos(x + imageWidth, y + imageHeight, 0.0D).tex((imageX + renderWidth) * f, (imageY + renderHeight) * f2).endVertex();
/*  83 */     worldrenderer.pos(x + imageWidth, y, 0.0D).tex((imageX + renderWidth) * f, imageY * f).endVertex();
/*  84 */     worldrenderer.pos(x, y, 0.0D).tex(imageX * f, imageY * f2).endVertex();
/*  85 */     tessellator.draw();
/*  86 */     GlStateManager.disableBlend();
/*  87 */     GlStateManager.disableAlpha();
/*     */   }
/*     */   
/*     */   public static float getStringWidth(String text, float size) {
/*  91 */     float width = 0.0F;
/*  92 */     for (int i = 0; i < text.length(); i++) {
/*  93 */       int characterIndex = text.charAt(i);
/*  94 */       if (characterIndex == 167 && i + 1 < text.length()) {
/*  95 */         i++;
/*     */       } else {
/*  97 */         width += mc.fontRendererObj.getCharWidthNoUnicode((char)characterIndex) * size / 8.0F;
/*     */       } 
/*     */     } 
/* 100 */     return width;
/*     */   }
/*     */ }


/* Location:              C:\Users\Mathew\Documents\LehanClient.jar!\LehanClien\\utils\fontRenderer\FixedFontRenderer.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */